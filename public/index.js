(()=>{"use strict";class t{static getSocketUrl(){return"http://192.168.1.206:3000"}static getRingMediaUrl(){return"./media/ring.mp3"}}class e extends Audio{constructor(t){super(t),this.loop=!0,this.onpause=()=>{this.currentTime=0}}}class s{handlers={};on(t,e){this.handlers[t]=this.handlers[t]??[],this.handlers[t].push(e)}emit(t,...e){const s=this.handlers[t]??[];for(const t of s)t(...e)}}class n extends s{Forbidden=class extends Error{constructor(){super("Action is forbidden")}};static Status={Idle:"idle",Calling:"calling",Receiving:"receiving_call",Active:"active_call"};static Event={IdObtained:"id_obtained",InterlocutorNotFound:"interlocutor_not_found",InterlocutorDisconnected:"interlocutor_disconnected",Call:"call",CallRejection:"call_rejection",CallAcceptance:"call_acceptance",CallTermination:"call_termination",CallUnavailable:"call_unavailable",CallDisconnected:"call_disconnected",IncomingVideo:"incoming_video",OutgoingVideo:"outgoing_video",Offer:"offer",Answer:"answer",IceCandidate:"ice_candidate"};constructor(t,e,s){super(),this.ws=t,this.ringAudio=e,this.camera=s,this.status=n.Status.Idle,this.rpConnection=null,this.callerId=null,this.calleeId=null}getInterlocutorId(){return this.callerId===this.ws.id?this.calleeId:this.callerId}async createWebRTCConnection(){const t=new RTCPeerConnection;t.addEventListener("icecandidate",(t=>{t.candidate&&this.emit(n.Event.IceCandidate,t.candidate)})),t.addEventListener("track",(t=>{const e=t?.streams[0];e&&this.emit(n.Event.IncomingVideo,e)}));const e=await this.camera.getStream();for(const s of e.getTracks())t.addTrack(s,e);return t}async call(t){if(this.status!==n.Status.Idle)throw new n.Forbidden;try{this.status=n.Status.Calling,this.callerId=this.ws.id,this.calleeId=t,await this.ringAudio.play(),this.rpConnection=await this.createWebRTCConnection();const e=await this.rpConnection.createOffer();await this.rpConnection.setLocalDescription(e),this.ws.emit("message",t,{event:n.Event.Offer,payload:e})}catch(t){throw this.ringAudio.pause(),t}}async accept(){if(this.status!==n.Status.Receiving)throw new n.Forbidden;try{this.status=n.Status.Active;const t=await this.rpConnection.createAnswer();await this.rpConnection.setLocalDescription(t),this.ws.emit("message",this.callerId,{event:n.Event.Answer,payload:t})}finally{this.ringAudio.pause()}}async reject(){if(this.status!==n.Status.Receiving)throw new n.Forbidden;try{this.ws.emit("message",this.callerId,{event:n.Event.CallRejection}),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null}finally{this.ringAudio.pause()}}terminate(){if(this.status==n.Status.Idle)throw new n.Forbidden;this.ringAudio.pause(),this.ws.emit("message",this.getInterlocutorId(),{event:n.Event.CallTermination}),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null}disconnect(){this.status!==n.Status.Idle&&(this.ringAudio.pause(),this.ws.emit("message",this.getInterlocutorId(),{event:n.Event.InterlocutorDisconnected}),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null)}async connect(){this.ws.on("connect_err",(t=>{if(!this.ws.active)throw t})),this.ws.on("connect",(()=>{this.emit(n.Event.IdObtained,this.ws.id)})),this.ws.on("receiver_not_found",(()=>{this.status=n.Status.Idle,this.callerId=null,this.calleeId=null,this.ringAudio.pause(),this.emit(n.Event.InterlocutorNotFound)}));const t={[n.Event.Offer]:async(t,e)=>{this.status===n.Status.Idle?(this.status=n.Status.Receiving,this.callerId=t,this.calleeId=this.ws.id,await this.ringAudio.play(),this.rpConnection=await this.createWebRTCConnection(),await this.rpConnection.setRemoteDescription(e),this.emit(n.Event.Call,t)):this.ws.emit("message",t,{event:n.Event.CallUnavailable})},[n.Event.Answer]:async(t,e)=>{this.status===n.Status.Calling&&this.calleeId===t&&(this.ringAudio.pause(),this.status=n.Status.Active,await this.rpConnection.setRemoteDescription(e),this.emit(n.Event.CallAcceptance,t,e))},[n.Event.IceCandidate]:async(t,e)=>{this.status!==n.Status.Idle&&this.getInterlocutorId()===t&&this.rpConnection?.addIceCandidate(e)},[n.Event.CallRejection]:async t=>{this.status===n.Status.Calling&&this.calleeId===t&&(this.ringAudio.pause(),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null,this.rpConnection=null,this.emit(n.Event.CallRejection,t))},[n.Event.CallTermination]:t=>{this.status!==n.Status.Idle&&this.getInterlocutorId()===t&&(this.ringAudio.pause(),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(n.Event.CallTermination,t))},[n.Event.CallUnavailable]:t=>{this.status===n.Status.Calling&&this.calleeId===t&&(this.ringAudio.pause(),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(n.Event.CallUnavailable,t))},[n.Event.InterlocutorDisconnected]:async t=>{this.status!==n.Status.Idle&&this.getInterlocutorId()===t&&(this.ringAudio.pause(),this.status=n.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(n.Event.InterlocutorDisconnected,t))}};this.ws.on("message",(async(e,{event:s,payload:n})=>{const i=t[s];i&&i.call(this,e,n)})),this.ws.connect(),this.emit(n.Event.OutgoingVideo,await this.camera.getStream())}}class i{static isSocketId(t){return"string"==typeof t&&20===t.length}}class a{static async custom(t){return Swal.fire({icon:t.icon??"",title:t.title??"",text:t.message??"",timer:t.timer??null,showCloseButton:t.closeBtn??!1,allowOutsideClick:t.outsideClick??!1,allowEscapeKey:t.escape??!1,showConfirmButton:t.confirm??!1,showCancelButton:t.cancel??!1,confirmButtonText:t.confirmText??"Confirm",cancelButtonText:t.cancelText??"Cancel"})}static async error(t){return a.custom({icon:"error",closeBtn:!0,title:t.title??"Oops",message:t.message,timer:t.timer??1e4})}static async unrecoverable(){return a.custom({icon:"error",title:"Really bad error",message:"Please refresh or contact me :("})}static async cancelable(t){return a.custom({cancel:!0,title:t.title??"Cancel",message:t.message,timer:t.timer})}static async questionable(t){return a.custom({icon:"question",cancel:!0,confirm:!0,confirmText:"Accept",cancelText:"Reject",title:t.title,message:t.message,timer:t.timer})}static async close(){return Swal.close()}}const l=io(t.getSocketUrl(),{transports:["websocket"],autoConnect:!1}),c=new e(t.getRingMediaUrl()),o=new class{constructor(){this.stream=null}async getStream(){if(this.stream=this.stream??await navigator.mediaDevices.getUserMedia({audio:!0,video:!0}),!this.stream)throw new Error("Web camera can't be found");return this.stream}},r=new n(l,c,o),d=new class{constructor(t){this.videoCall=t}async run(t){const e=t.document.getElementByIdOrThrow("call_input"),s=t.document.getElementByIdOrThrow("call_button"),l=t.document.getElementByIdOrThrow("call_stop_button"),c=t.document.getElementByIdOrThrow("own_video"),o=t.document.getElementByIdOrThrow("other_video"),r=()=>{e.className.includes("hidden")&&t.document.removeClassName(e,"hidden"),s.className.includes("hidden")&&t.document.removeClassName(s,"hidden"),l.className.includes("hidden")||t.document.appendClassName(l,"hidden"),o.className.includes("hidden")||t.document.appendClassName(o,"hidden"),o.srcObject=null,e.value=""},d=()=>{e.className.includes("hidden")||t.document.appendClassName(e,"hidden"),s.className.includes("hidden")||t.document.appendClassName(s,"hidden"),l.className.includes("hidden")&&t.document.removeClassName(l,"hidden"),o.className.includes("hidden")&&t.document.removeClassName(o,"hidden")};t.addEventListener("unload",(()=>{this.videoCall.disconnect(),r()})),e.addEventListener("focus",(()=>{t.document.removeClassName(e,"error")})),s.addEventListener("click",(async()=>{const s=e.value;if(!i.isSocketId(s))return void t.document.appendClassName(e,"error");await this.videoCall.call(s);const{dismiss:n}=await a.cancelable({title:"Calling...",timer:3e4});["cancel","timer"].includes(n)&&(await this.videoCall.terminate(),r())})),l.addEventListener("click",(async()=>{this.videoCall.terminate(),r()})),this.videoCall.on(n.Event.IdObtained,(t=>{document.getElementByIdOrThrow("chat_id").textContent=`Your call id: ${t}`})),this.videoCall.on(n.Event.Call,(async t=>{const{isConfirmed:e,dismiss:s}=await a.questionable({title:"Call",message:`From: ${t}`,timer:3e4});if(e)return await this.videoCall.accept(),void d();["cancel","timer"].includes(s)&&(await this.videoCall.reject(),r())})),this.videoCall.on(n.Event.InterlocutorNotFound,(async()=>{await a.error({title:"User offline",text:"Please try again later"}),r()})),this.videoCall.on(n.Event.InterlocutorDisconnected,(async()=>{await a.error({title:"User disconnected",message:"User suddenly disconnected"}),r()})),this.videoCall.on(n.Event.CallAcceptance,(async()=>{await a.close(),d()})),this.videoCall.on(n.Event.CallRejection,(async()=>{await a.close(),r()})),this.videoCall.on(n.Event.CallTermination,(async()=>{await a.close(),r()})),this.videoCall.on(n.Event.CallUnavailable,(async()=>{await a.error({title:"User is busy",message:"Another call in progress"}),r()})),this.videoCall.on(n.Event.OutgoingVideo,(t=>{c.srcObject=t})),this.videoCall.on(n.Event.IncomingVideo,(t=>{o.srcObject=t})),await this.videoCall.connect()}}(r);d.run(class{static enhance(t){return t.addEventListener("error",(async t=>{console.error(t),await Popups.unrecoverable()})),t.document.getElementByIdOrThrow=function(t){const e=this.getElementById(t);if(!e)throw new Error(`Element "${t}" wasn't found`);return e},t.document.appendClassName=function(t,e){return t.className=(t.className??"").split(" ").filter(Boolean).concat(e).join(" "),t},t.document.removeClassName=function(t,e){return t.className=(t.className??"").split(" ").filter((t=>t!==e)).join(" "),t},t}}.enhance(window))})();