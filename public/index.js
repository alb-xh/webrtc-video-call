(()=>{"use strict";class t{static getSocketUrl(){return"http://192.168.1.206:3000"}static getRingMediaUrl(){return"./media/ring.mp3"}}class e extends Audio{constructor(t){super(t),this.loop=!0,this.onpause=()=>{this.currentTime=0}}}class s{handlers={};on(t,e){this.handlers[t]=this.handlers[t]??[],this.handlers[t].push(e)}emit(t,...e){const s=this.handlers[t]??[];for(const t of s)t(...e)}}class i extends s{Forbidden=class extends Error{constructor(){super("Action is forbidden")}};static Status={Idle:"idle",Calling:"calling",Receiving:"receiving_call",Active:"active_call"};static Event={SubscriberId:"receive_subscriber_id",SubscriberNotFound:"subscriber_not_found",Call:"call",CallRejection:"call_rejection",CallAcceptance:"call_acceptance",CallTermination:"call_termination",CallUnavailable:"call_unavailable"};constructor(t){super(),this.ws=t,this.callerId=null,this.calleeId=null,this.status=i.Status.Idle}call(t,e){if(this.status!==i.Status.Idle)throw new i.Forbidden;this.ws.emit("message",t,{event:i.Event.Call,payload:e}),this.status=i.Status.Calling,this.callerId=this.ws.id,this.calleeId=t}accept(t){if(this.status!==i.Status.Receiving)throw new i.Forbidden;this.ws.emit("message",this.callerId,{event:i.Event.CallAcceptance,payload:t}),this.status=i.Status.Active}reject(){if(this.status!==i.Status.Receiving)throw new i.Forbidden;this.ws.emit("message",this.callerId,{event:i.Event.CallRejection}),this.status=i.Status.Idle,this.callerId=null,this.calleeId=null}stop(){if(this.status==i.Status.Idle)throw new i.Forbidden;this.ws.emit("message",this.callerId===this.ws.id?this.calleeId:this.callerId,{event:i.Event.CallTermination}),this.status=i.Status.Idle,this.callerId=null,this.calleeId=null}connect(){this.ws.on("connect",(()=>{this.emit(i.Event.SubscriberId,this.ws.id)})),this.ws.on("connect_err",(t=>{if(!this.ws.active)throw t})),this.ws.on("receiver_not_found",(()=>{this.emit(i.Event.SubscriberNotFound)}));const t={[i.Event.Call]:(t,e)=>{this.status===i.Status.Idle?(this.status=i.Status.Receiving,this.callerId=t,this.calleeId=this.ws.id,this.emit(i.Event.Call,t,e)):this.ws.emit("message",t,{event:i.Event.CallUnavailable})},[i.Event.CallAcceptance]:(t,e)=>{this.status===i.Status.Calling&&this.calleeId===t&&(this.status=i.Status.Active,this.emit(i.Event.CallAcceptance,t,e))},[i.Event.CallRejection]:(t,e)=>{this.status===i.Status.Calling&&this.calleeId===t&&(this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(i.Event.CallRejection,t,e))},[i.Event.CallTermination]:(t,e)=>{this.status!==i.Status.Active||this.callerId!==t&&this.calleeId!==t||(this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(i.Event.CallTermination,t,e))},[i.Event.CallUnavailable]:(t,e)=>{this.emit(i.Event.CallUnavailable,t,e)}};this.ws.on("message",(async(e,{event:s,payload:i})=>{const n=t[s];n&&n.call(this,e,i)})),this.ws.connect()}}class n extends i{static Event={...i.Event,IncomingVideo:"incoming_video",OutgoingVideo:"outgoing_video"};constructor(t,e,s,i){super(t),this.rpConnection=e,this.ringAudio=s,this.camera=i}async call(t){try{await this.ringAudio.play(),await this.rpConnection.setLocalDescription(await this.rpConnection.createOffer()),super.call(t,this.rpConnection.localDescription)}finally{await this.ringAudio.pause()}}async accept(){try{await this.rpConnection.setLocalDescription(await this.rpConnection.createAnswer()),super.accept(this.rpConnection.localDescription)}finally{await this.ringAudio.pause()}}async reject(){try{super.reject()}finally{await this.ringAudio.pause()}}async connect(){super.connect(),this.on(n.Event.Call,(async(t,e)=>{await this.ringAudio.play(),await this.rpConnection.setRemoteDescription(e)})),this.on(n.Event.CallAcceptance,(async(t,e)=>{await this.rpConnection.setRemoteDescription(e),await this.ringAudio.pause()})),this.on(n.Event.CallRejection,(async()=>{await this.ringAudio.pause()})),this.rpConnection.addEventListener("track",(async t=>{const e=t.streams[0];e&&this.emit(n.Event.IncomingVideo,e)}));const t=await this.camera.getStream(),e=t.getTracks();for(const s of e)this.rpConnection.addTrack(s,t);this.emit(n.Event.OutgoingVideo,t)}}class a{static isSubscriberId(t){return"string"==typeof t&&20===t.length}}class l{static async custom(t){return Swal.fire({icon:t.icon??"",title:t.title??"",text:t.message??"",timer:t.timer??null,showCloseButton:t.closeBtn??!1,allowOutsideClick:t.outsideClick??!1,allowEscapeKey:t.escape??!1,showConfirmButton:t.confirm??!1,showCancelButton:t.cancel??!1,confirmButtonText:t.confirmText??"Confirm",cancelButtonText:t.cancelText??"Cancel"})}static async error(t){return l.custom({icon:"error",closeBtn:!0,title:t.title??"Oops",message:t.message,timer:t.timer??1e4})}static async unrecoverable(){return l.custom({icon:"error",title:"Really bad error",message:"Please refresh or contact me :("})}static async cancelable(t){return l.custom({cancel:!0,title:t.title??"Cancel",message:t.message,timer:t.timer})}static async questionable(t){return l.custom({icon:"question",cancel:!0,confirm:!0,confirmText:"Accept",cancelText:"Reject",title:t.title,message:t.message,timer:t.timer})}static async close(){return Swal.close()}}const c=io(t.getSocketUrl(),{transports:["websocket"],autoConnect:!1}),o=new e(t.getRingMediaUrl()),r=new class{constructor(){this.stream=null}async getStream(){if(this.stream=this.stream??await navigator.mediaDevices.getUserMedia({audio:!0,video:!0}),!this.stream)throw new Error("Web camera can't be found");return this.stream}},u=new RTCPeerConnection,d=new n(c,u,o,r),h=new class{constructor(t){this.videoCall=t}async run(t){const e=t.document.getElementByIdOrThrow("call_input"),s=t.document.getElementByIdOrThrow("call_button");e.addEventListener("focus",(()=>{const e=t.document.getElementByIdOrThrow("call_input");t.document.removeClassName(e,"error")})),s.addEventListener("click",(async()=>{const s=e.value;if(!a.isSubscriberId(s))return void t.document.appendClassName(e,"error");await this.videoCall.call(s);const{dismiss:i}=await l.cancelable({title:"Calling..."});"cancel"===i&&await this.videoCall.stop()})),this.videoCall.on(n.Event.SubscriberId,(t=>{document.getElementByIdOrThrow("callee_id").textContent=`Your call id: ${t}`})),this.videoCall.on(n.Event.SubscriberNotFound,(async()=>{await l.error({title:"User offline",text:"Please try again later"})})),this.videoCall.on(n.Event.CallAcceptance,(async()=>{await l.close()})),this.videoCall.on(n.Event.CallRejection,(async()=>{await l.close()})),this.videoCall.on(n.Event.CallTermination,(async()=>{await l.close()})),this.videoCall.on(n.Event.Call,(async t=>{const{isConfirmed:e}=await l.questionable({title:"Call",message:`From: ${t}`,timer:3e4});e?await this.videoCall.accept():await this.videoCall.reject()})),this.videoCall.on(n.Event.IncomingVideo,(t=>{console.log("Incoming",t);const e=document.getElementByIdOrThrow("other_video");e.srcObject=t,document.removeClassName(e,"hidden")})),this.videoCall.on(n.Event.OutgoingVideo,(t=>{console.log("Outgoing",t),document.getElementByIdOrThrow("own_video").srcObject=t})),await this.videoCall.connect()}}(d);h.run(class{static enhance(t){return t.addEventListener("error",(async t=>{console.error(t),await Popups.unrecoverable()})),t.document.getElementByIdOrThrow=function(t){const e=this.getElementById(t);if(!e)throw new Error(`Element "${t}" wasn't found`);return e},t.document.appendClassName=function(t,e){return t.className=(t.className??"").split(" ").filter(Boolean).concat(e).join(" "),t},t.document.removeClassName=function(t,e){return t.className=(t.className??"").split(" ").filter((t=>t!==e)).join(" "),t},t}}.enhance(window))})();