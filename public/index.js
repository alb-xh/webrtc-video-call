(()=>{"use strict";class t{static getSocketUrl(){return"http://localhost:3000"}static getRingMediaUrl(){}}class e extends Audio{constructor(t){super(t),this.loop=!0,this.onpause=()=>{this.currentTime=0}}}class s{handlers={};on(t,e){this.handlers[t]=this.handlers[t]??[],this.handlers[t].push(e)}emit(t,...e){this.handlers[t];for(const t of t)t(...e)}}class i extends s{Forbidden=class extends Error{constructor(){super("Action is forbidden")}};static Status={Idle:"idle",Calling:"calling",Receiving:"receiving_call",Active:"active_call"};static Event={SubscriberId:"receive_subscriber_id",SubscriberNotFound:"subscriber_not_found",Call:"call",CallRejection:"call_rejection",CallAcceptance:"call_acceptance",CallTermination:"call_termination",CallUnavailable:"call_unavailable"};constructor(t){this.ws=t,this.callerId=null,this.calleeId=null,this.status=i.Status.Idle}call(t,e){if(this.status!==i.Status.Idle)throw new i.Forbidden;this.status=i.Status.Calling,this.callerId=this.ws.id,this.calleeId=t,this.ws.emit("message",t,{event:i.Event.Call,payload:e})}accept(t){if(this.status!==i.Status.Receiving)throw new i.Forbidden;this.status=i.Status.Active,this.ws.emit("message",this.callerId,{event:i.Event.CallAcceptance,payload:t})}reject(){if(this.status!==i.Status.Receiving)throw new i.Forbidden;this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.ws.emit("message",this.callerId,{event:i.Event.CallRejection})}stop(){if(this.status!==i.Status.Active)throw new i.Forbidden;this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.ws.emit("message",this.callerId===this.ws.id?this.calleeId:this.callerId,{event:i.Event.CallTermination})}connect(){this.ws.on("connect",(()=>{this.emit(CallEvent.SubscriberId,this.ws.id)})),this.ws.on("connect_err",(t=>{if(!this.ws.active)throw t})),this.ws.on("receiver_not_found",(()=>{this.emit(CallEvent.SubscriberNotFound)}));const t={[i.Event.Call]:(t,e)=>{this.status===i.Status.Idle?(this.status=i.Status.Receiving,this.callerId=t,this.calleeId=this.ws.id,this.emit(i.Event.Call,t,e)):this.ws.emit("message",t,{event:i.Event.CallUnavailable})},[i.Event.CallAcceptance]:(t,e)=>{this.status===i.Status.Calling&&this.calleeId===t&&(this.status=i.Status.Active,this.emit(i.Event.CallAcceptance,t,e))},[i.Event.CallRejection]:(t,e)=>{this.status===i.Status.Calling&&this.calleeId===t&&(this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(i.Event.CallRejection,t,e))},[i.Event.CallTermination]:(t,e)=>{this.status!==i.Status.Active||this.callerId!==t&&this.calleeId!==t||(this.status=i.Status.Idle,this.callerId=null,this.calleeId=null,this.emit(i.Event.CallTermination,t,e))},[i.Event.CallUnavailable]:(t,e)=>{this.emit(i.Event.CallUnavailable,t,e)}};this.ws.on("message",(async(e,{type:s,payload:i})=>{const a=t[s];a&&a.call(this,e,i)})),this.socket.connect()}}class a extends i{static Event={...i.Event,IncomingVideo:"incoming_video",OutgoingVideo:"outgoing_video"};constructor(t,e,s,i){super(t),this.rpConnection=e,this.ringAudio=s,this.camera=i}async call(t){try{this.ringAudio.play(),await this.rpConnection.setLocalDescription(await this.rpConnection.createOffer()),super.call(t,this.rpConnection.localDescription)}finally{this.ringAudio.pause()}}async accept(){try{await this.rp.setLocalDescription(this.rp.createAnswer()),super.accept(this.rp.localDescription)}finally{this.ringAudio.pause()}}async reject(){try{await this.rp.setRemoteDescription(null),super.reject()}finally{this.ringAudio.pause()}}async stop(){await this.rp.setRemoteDescription(null),await this.rp.setLocalDescription(null),super.stop()}async connect(){super.connect(),this.on(a.Event.Call,(async(t,e)=>{this.ringAudio.play(),await this.rp.setRemoteDescription(e)})),this.on(a.Event.CallAcceptance,(async()=>{this.ringAudio.pause()})),this.on(a.Event.CallRejection,(()=>{this.ringAudio.pause()})),this.rpConnection.addEventListener("track",(async t=>{console.log(t);const e=t.streams[0];e&&this.emit(a.Event.IncomingVideo,e)}));const t=await this.camera.getStream(),e=t.getTracks();for(const s of e)this.rpConnection.addTrack(s,t);this.emit(a.Event.OutgoingVideo,t)}}class n{static isSubscriberId(t){return"string"==typeof t&&20===t.length}}const l=io(t.getSocketUrl(),{transports:["websocket"],autoConnect:!1}),c=new e(t.getRingMediaUrl()),o=new class{constructor(){this.stream=null}async getStream(){if(this.stream=this.stream??await navigator.mediaDevices.getUserMedia({audio:!0,video:!0}),!this.stream)throw new Error("Web camera can't be found");return this.stream}},r=new RTCPeerConnection,d=new a(l,r,c,o),h=new class{constructor(t){this.videoCall=t}async run(t){const e=t.document.getElementByIdOrThrow("call_input"),s=t.document.getElementByIdOrThrow("call_button");e.addEventListener("focus",(()=>{const e=t.document.getElementByIdOrThrow("call_input");t.document.removeClassName(e,"error")})),s.addEventListener("click",(async()=>{const s=e.value;if(!n.isSubscriberId(s))return void t.document.appendClassName(e,"error");await this.videoCall.call(s);const{isDismissed:i}=await Popups.cancelable({title:"Calling..."});i&&await this.videoCall.stop()})),this.videoCall.on(a.Event.SubscriberId,(t=>{document.getElementByIdOrThrow("callee_id").textContent=`Your call id: ${t}`})),this.videoCall.on(a.Event.SubscriberNotFound,(async()=>{await Popups.error({title:"User offline",text:"Please try again later"})})),this.videoCall.on(a.Event.IncomingVideo,(t=>{const e=document.getElementByIdOrThrow("other_video");e.srcObject=t,document.removeClassName(e,"hidden")})),this.videoCall.on(a.Event.OutgoingVideo,(t=>{document.getElementByIdOrThrow("own_video").srcObject=t})),this.videoCall.on(a.Event.CallAcceptance,(async()=>{await Popups.close()})),this.videoCall.on(a.Event.CallRejection,(async()=>{await Popups.close()})),this.videoCall.on(a.Event.CallTermination,(async()=>{await Popups.close()})),this.videoCall.on(a.Event.Call,(async t=>{const{isConfirmed:e}=await Popups.questionable({title:"Call",message:`From: ${t}`,timer:3e4});e?await this.videoCall.accept():await this.videoCall.reject()})),await this.videoCall.connect()}}(d);h.run(class{static enhance(t){return t.addEventListener("error",(async t=>{console.error(t),await Popups.unrecoverable()})),t.document.getElementByIdOrThrow=function(t){const e=this.getElementById(t);if(!e)throw new Error(`Element "${t}" wasn't found`);return e},t.document.appendClassName=function(t,e){return t.className=(t.className??"").split(" ").filter(Boolean).concat(e).join(" "),t},t.document.removeClassName=function(t,e){return t.className=(t.className??"").split(" ").filter((t=>t!==e)).join(" "),t},t}}.enhance(window))})();